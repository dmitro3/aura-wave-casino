{
  "timestamp": "2025-08-02T15:02:32.145Z",
  "totalTables": 0,
  "totalFunctions": 0,
  "edgeFunctions": {
    "case-opening-engine": {
      "path": "./supabase/functions/case-opening-engine",
      "hasIndex": true,
      "codeLength": 7042,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*'..."
    },
    "claim-free-case": {
      "path": "./supabase/functions/claim-free-case",
      "hasIndex": true,
      "codeLength": 7164,
      "preview": "import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, api..."
    },
    "coinflip-streak-engine": {
      "path": "./supabase/functions/coinflip-streak-engine",
      "hasIndex": true,
      "codeLength": 8729,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n..."
    },
    "crash-engine": {
      "path": "./supabase/functions/crash-engine",
      "hasIndex": true,
      "codeLength": 9984,
      "preview": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.52.0\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin'..."
    },
    "delete-user-account": {
      "path": "./supabase/functions/delete-user-account",
      "hasIndex": true,
      "codeLength": 6397,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n..."
    },
    "migrate-daily-seeds": {
      "path": "./supabase/functions/migrate-daily-seeds",
      "hasIndex": true,
      "codeLength": 4834,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '..."
    },
    "process-pending-deletions": {
      "path": "./supabase/functions/process-pending-deletions",
      "hasIndex": true,
      "codeLength": 2982,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n..."
    },
    "process-tip": {
      "path": "./supabase/functions/process-tip",
      "hasIndex": true,
      "codeLength": 2202,
      "preview": "import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\"..."
    },
    "roulette-engine": {
      "path": "./supabase/functions/roulette-engine",
      "hasIndex": true,
      "codeLength": 57836,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.52.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin'..."
    },
    "tower-engine": {
      "path": "./supabase/functions/tower-engine",
      "hasIndex": true,
      "codeLength": 16176,
      "preview": "import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.52.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin'..."
    }
  },
  "tableData": {},
  "functionData": {},
  "functionResults": {
    "reset_user_stats_comprehensive": {
      "exists": true,
      "response": {
        "error": "User not found",
        "success": false,
        "user_id": "00000000-0000-0000-0000-000000000000"
      },
      "returnType": "object"
    },
    "ensure_user_level_stats": {
      "exists": true,
      "error": "Could not find the function public.ensure_user_level_stats(user_id) in the schema cache",
      "response": null
    },
    "calculate_level_from_xp": {
      "exists": true,
      "error": "Could not find the function public.calculate_level_from_xp(user_id) in the schema cache",
      "response": null
    },
    "add_xp_to_user": {
      "exists": true,
      "error": "Could not find the function public.add_xp_to_user(user_id) in the schema cache",
      "response": null
    }
  },
  "commitAnalysis": {
    "20250130000008_create-comprehensive-stats-reset-function.sql": {
      "exists": true,
      "length": 13009,
      "content": "-- Create comprehensive user stats reset function\n-- This function resets all user statistics across all relevant tables\n\n-- =============================================================================\n-- 1. CREATE COMPREHENSIVE STATS RESET FUNCTION\n-- =============================================================================\n\nCREATE OR REPLACE FUNCTION public.reset_user_stats_comprehensive(target_user_id UUID)\nRETURNS JSONB\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  result JSONB;\n  error_message TEXT;\n  tables_reset INTEGER := 0;\n  records_affected INTEGER := 0;\nBEGIN\n  RAISE NOTICE 'Starting comprehensive stats reset for user: %', target_user_id;\n  \n  -- Check if user exists\n  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = target_user_id) THEN\n    RETURN jsonb_build_object(\n      'success', false, \n      'error', 'User not found',\n      'user_id', target_user_id\n    );\n  END IF;\n\n  BEGIN\n    -- =============================================================================\n    -- RESET PROFILES TABLE (stats only - PRESERVE BALANCE)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting profiles table (preserving balance)...';\n    UPDATE public.profiles \n    SET \n      total_wagered = 0,\n      total_profit = 0,\n      last_claim_time = '1970-01-01 00:00:00+00'::timestamp with time zone,\n      badges = ARRAY['welcome'],\n      updated_at = now()\n    WHERE id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Profiles table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER_LEVEL_STATS TABLE (comprehensive level and game stats)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user_level_stats table...';\n    UPDATE public.user_level_stats \n    SET \n      current_level = 1,\n      lifetime_xp = 0,\n      current_level_xp = 0,\n      xp_to_next_level = 100,\n      border_tier = 1,\n      border_unlocked_at = NULL,\n      available_cases = 0,\n      total_cases_opened = 0,\n      total_case_value = 0,\n      coinflip_games = 0,\n      coinflip_wins = 0,\n      coinflip_wagered = 0,\n      coinflip_profit = 0,\n      best_coinflip_streak = 0,\n      current_coinflip_streak = 0,\n      crash_games = 0,\n      crash_wins = 0,\n      crash_wagered = 0,\n      crash_profit = 0,\n      roulette_games = 0,\n      roulette_wins = 0,\n      roulette_wagered = 0,\n      roulette_profit = 0,\n      roulette_highest_win = 0,\n      roulette_highest_loss = 0,\n      roulette_green_wins = 0,\n      roulette_red_wins = 0,\n      roulette_black_wins = 0,\n      roulette_favorite_color = 'none',\n      roulette_best_streak = 0,\n      roulette_current_streak = 0,\n      roulette_biggest_bet = 0,\n      tower_games = 0,\n      tower_wins = 0,\n      tower_wagered = 0,\n      tower_profit = 0,\n      total_games = 0,\n      total_wins = 0,\n      total_wagered = 0,\n      total_profit = 0,\n      biggest_win = 0,\n      biggest_loss = 0,\n      chat_messages_count = 0,\n      login_days_count = 0,\n      biggest_single_bet = 0,\n      current_win_streak = 0,\n      best_win_streak = 0,\n      tower_highest_level = 0,\n      tower_biggest_win = 0,\n      tower_biggest_loss = 0,\n      tower_best_streak = 0,\n      tower_current_streak = 0,\n      tower_perfect_games = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User level stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE GAME HISTORY\n    -- =============================================================================\n    RAISE NOTICE 'Deleting game history...';\n    DELETE FROM public.game_history WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game history deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET GAME_STATS TABLE\n    -- =============================================================================\n    RAISE NOTICE 'Resetting game_stats table...';\n    UPDATE public.game_stats \n    SET \n      wins = 0,\n      losses = 0,\n      total_profit = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE CASE REWARDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting case rewards...';\n    DELETE FROM public.case_rewards WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Case rewards deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE FREE CASE CLAIMS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting free case claims...';\n    DELETE FROM public.free_case_claims WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Free case claims deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER ACHIEVEMENTS (UNLOCKED)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting unlocked achievements...';\n    DELETE FROM public.unlocked_achievements WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Unlocked achievements deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER ACHIEVEMENTS (CLAIMED STATUS)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user achievements...';\n    UPDATE public.user_achievements \n    SET \n      claimed = false,\n      claimed_at = NULL\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User achievements reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER DAILY LOGINS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting user daily logins...';\n    DELETE FROM public.user_daily_logins WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User daily logins deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET LEVEL DAILY CASES\n    -- =============================================================================\n    RAISE NOTICE 'Resetting level daily cases...';\n    UPDATE public.level_daily_cases \n    SET \n      is_available = true,\n      last_reset_date = CURRENT_DATE,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Level daily cases reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE BETTING HISTORY (CRASH, ROULETTE)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting crash bets...';\n    DELETE FROM public.crash_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Crash bets deleted: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Deleting roulette bets...';\n    DELETE FROM public.roulette_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette bets deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE TOWER GAMES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting tower games...';\n    DELETE FROM public.tower_games WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Tower games deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE LIVE BET FEED ENTRIES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting live bet feed entries...';\n    DELETE FROM public.live_bet_feed WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Live bet feed entries deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE ROULETTE CLIENT SEEDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting roulette client seeds...';\n    DELETE FROM public.roulette_client_seeds WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette client seeds deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER RATE LIMITS\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user rate limits...';\n    UPDATE public.user_rate_limits \n    SET \n      bet_count = 0,\n      last_bet_time = now(),\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User rate limits reset: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Comprehensive stats reset completed successfully. Tables affected: %', tables_reset;\n\n    RETURN jsonb_build_object(\n      'success', true,\n      'message', 'User statistics reset successfully',\n      'user_id', target_user_id,\n      'tables_reset', tables_reset,\n      'timestamp', now()\n    );\n\n  EXCEPTION\n    WHEN OTHERS THEN\n      error_message := SQLERRM;\n      RAISE NOTICE 'Error in comprehensive stats reset for user %: %', target_user_id, error_message;\n      RETURN jsonb_build_object(\n        'success', false,\n        'error', error_message,\n        'user_id', target_user_id,\n        'tables_reset', tables_reset\n      );\n  END;\nEND;\n$$;\n\n-- =============================================================================\n-- 2. GRANT PERMISSIONS\n-- =============================================================================\n\nGRANT EXECUTE ON FUNCTION public.reset_user_stats_comprehensive(UUID) TO authenticated;\n\n-- =============================================================================\n-- 3. TEST THE FUNCTION\n-- =============================================================================\n\nDO $$\nBEGIN\n  RAISE NOTICE 'Comprehensive user stats reset function has been created successfully!';\n  RAISE NOTICE 'Function name: reset_user_stats_comprehensive(target_user_id UUID)';\n  RAISE NOTICE 'This function resets all user statistics across all relevant tables.';\nEND;\n$$;",
      "expectedReturnType": "JSONB"
    },
    "20250130000009_update-stats-reset-preserve-balance.sql": {
      "exists": true,
      "length": 13220,
      "content": "-- Update comprehensive user stats reset function to PRESERVE BALANCE\n-- This migration modifies the existing function to NOT reset user balance\n\n-- =============================================================================\n-- 1. UPDATE COMPREHENSIVE STATS RESET FUNCTION (PRESERVE BALANCE)\n-- =============================================================================\n\nCREATE OR REPLACE FUNCTION public.reset_user_stats_comprehensive(target_user_id UUID)\nRETURNS JSONB\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  result JSONB;\n  error_message TEXT;\n  tables_reset INTEGER := 0;\n  records_affected INTEGER := 0;\n  user_balance NUMERIC;\nBEGIN\n  RAISE NOTICE 'Starting comprehensive stats reset for user: %', target_user_id;\n  \n  -- Check if user exists\n  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = target_user_id) THEN\n    RETURN jsonb_build_object(\n      'success', false, \n      'error', 'User not found',\n      'user_id', target_user_id\n    );\n  END IF;\n\n  -- Get current balance to preserve it\n  SELECT balance INTO user_balance FROM public.profiles WHERE id = target_user_id;\n  RAISE NOTICE 'Preserving user balance: %', user_balance;\n\n  BEGIN\n    -- =============================================================================\n    -- RESET PROFILES TABLE (stats only - PRESERVE BALANCE)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting profiles table (preserving balance: %)...', user_balance;\n    UPDATE public.profiles \n    SET \n      total_wagered = 0,\n      total_profit = 0,\n      last_claim_time = '1970-01-01 00:00:00+00'::timestamp with time zone,\n      badges = ARRAY['welcome'],\n      updated_at = now()\n    WHERE id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Profiles table reset: % rows affected (balance preserved)', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER_LEVEL_STATS TABLE (comprehensive level and game stats)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user_level_stats table...';\n    UPDATE public.user_level_stats \n    SET \n      current_level = 1,\n      lifetime_xp = 0,\n      current_level_xp = 0,\n      xp_to_next_level = 100,\n      border_tier = 1,\n      border_unlocked_at = NULL,\n      available_cases = 0,\n      total_cases_opened = 0,\n      total_case_value = 0,\n      coinflip_games = 0,\n      coinflip_wins = 0,\n      coinflip_wagered = 0,\n      coinflip_profit = 0,\n      best_coinflip_streak = 0,\n      current_coinflip_streak = 0,\n      crash_games = 0,\n      crash_wins = 0,\n      crash_wagered = 0,\n      crash_profit = 0,\n      roulette_games = 0,\n      roulette_wins = 0,\n      roulette_wagered = 0,\n      roulette_profit = 0,\n      roulette_highest_win = 0,\n      roulette_highest_loss = 0,\n      roulette_green_wins = 0,\n      roulette_red_wins = 0,\n      roulette_black_wins = 0,\n      roulette_favorite_color = 'none',\n      roulette_best_streak = 0,\n      roulette_current_streak = 0,\n      roulette_biggest_bet = 0,\n      tower_games = 0,\n      tower_wins = 0,\n      tower_wagered = 0,\n      tower_profit = 0,\n      total_games = 0,\n      total_wins = 0,\n      total_wagered = 0,\n      total_profit = 0,\n      biggest_win = 0,\n      biggest_loss = 0,\n      chat_messages_count = 0,\n      login_days_count = 0,\n      biggest_single_bet = 0,\n      current_win_streak = 0,\n      best_win_streak = 0,\n      tower_highest_level = 0,\n      tower_biggest_win = 0,\n      tower_biggest_loss = 0,\n      tower_best_streak = 0,\n      tower_current_streak = 0,\n      tower_perfect_games = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User level stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE GAME HISTORY\n    -- =============================================================================\n    RAISE NOTICE 'Deleting game history...';\n    DELETE FROM public.game_history WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game history deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET GAME_STATS TABLE\n    -- =============================================================================\n    RAISE NOTICE 'Resetting game_stats table...';\n    UPDATE public.game_stats \n    SET \n      wins = 0,\n      losses = 0,\n      total_profit = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE CASE REWARDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting case rewards...';\n    DELETE FROM public.case_rewards WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Case rewards deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE FREE CASE CLAIMS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting free case claims...';\n    DELETE FROM public.free_case_claims WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Free case claims deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER ACHIEVEMENTS (UNLOCKED)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting unlocked achievements...';\n    DELETE FROM public.unlocked_achievements WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Unlocked achievements deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER ACHIEVEMENTS (CLAIMED STATUS)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user achievements...';\n    UPDATE public.user_achievements \n    SET \n      claimed = false,\n      claimed_at = NULL\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User achievements reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER DAILY LOGINS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting user daily logins...';\n    DELETE FROM public.user_daily_logins WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User daily logins deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET LEVEL DAILY CASES\n    -- =============================================================================\n    RAISE NOTICE 'Resetting level daily cases...';\n    UPDATE public.level_daily_cases \n    SET \n      is_available = true,\n      last_reset_date = CURRENT_DATE,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Level daily cases reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE BETTING HISTORY (CRASH, ROULETTE)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting crash bets...';\n    DELETE FROM public.crash_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Crash bets deleted: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Deleting roulette bets...';\n    DELETE FROM public.roulette_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette bets deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE TOWER GAMES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting tower games...';\n    DELETE FROM public.tower_games WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Tower games deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE LIVE BET FEED ENTRIES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting live bet feed entries...';\n    DELETE FROM public.live_bet_feed WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Live bet feed entries deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE ROULETTE CLIENT SEEDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting roulette client seeds...';\n    DELETE FROM public.roulette_client_seeds WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette client seeds deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER RATE LIMITS\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user rate limits...';\n    UPDATE public.user_rate_limits \n    SET \n      bet_count = 0,\n      last_bet_time = now(),\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User rate limits reset: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Comprehensive stats reset completed successfully. Tables affected: % (Balance preserved: %)', tables_reset, user_balance;\n\n    RETURN jsonb_build_object(\n      'success', true,\n      'message', 'User statistics reset successfully (balance preserved)',\n      'user_id', target_user_id,\n      'tables_reset', tables_reset,\n      'balance_preserved', user_balance,\n      'timestamp', now()\n    );\n\n  EXCEPTION\n    WHEN OTHERS THEN\n      error_message := SQLERRM;\n      RAISE NOTICE 'Error in comprehensive stats reset for user %: %', target_user_id, error_message;\n      RETURN jsonb_build_object(\n        'success', false,\n        'error', error_message,\n        'user_id', target_user_id,\n        'tables_reset', tables_reset,\n        'balance_preserved', user_balance\n      );\n  END;\nEND;\n$$;\n\n-- =============================================================================\n-- 2. TEST THE UPDATED FUNCTION\n-- =============================================================================\n\nDO $$\nBEGIN\n  RAISE NOTICE 'Updated comprehensive user stats reset function!';\n  RAISE NOTICE 'Function name: reset_user_stats_comprehensive(target_user_id UUID)';\n  RAISE NOTICE 'IMPORTANT: This function now PRESERVES user balance during reset';\n  RAISE NOTICE 'Balance will NOT be reset to 0 - only statistics are reset';\nEND;\n$$;",
      "expectedReturnType": "JSONB"
    }
  },
  "fixScript": "-- FIX 1: DROP AND RECREATE reset_user_stats_comprehensive FUNCTION\n-- This fixes the \"cannot change return type of existing function\" error\nDROP FUNCTION IF EXISTS public.reset_user_stats_comprehensive(UUID);\n\n-- FIX 2: RECREATE FUNCTION WITH CORRECT RETURN TYPE (from commit 9404977)\nCREATE OR REPLACE FUNCTION public.reset_user_stats_comprehensive(target_user_id UUID)\nRETURNS JSONB\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nDECLARE\n  result JSONB;\n  error_message TEXT;\n  tables_reset INTEGER := 0;\n  records_affected INTEGER := 0;\n  user_balance NUMERIC;\nBEGIN\n  RAISE NOTICE 'Starting comprehensive stats reset for user: %', target_user_id;\n  \n  -- Check if user exists\n  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = target_user_id) THEN\n    RETURN jsonb_build_object(\n      'success', false, \n      'error', 'User not found',\n      'user_id', target_user_id\n    );\n  END IF;\n\n  -- Get current balance to preserve it\n  SELECT balance INTO user_balance FROM public.profiles WHERE id = target_user_id;\n  RAISE NOTICE 'Preserving user balance: %', user_balance;\n\n  BEGIN\n    -- =============================================================================\n    -- RESET PROFILES TABLE (stats only - PRESERVE BALANCE)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting profiles table (preserving balance: %)...', user_balance;\n    UPDATE public.profiles \n    SET \n      total_wagered = 0,\n      total_profit = 0,\n      last_claim_time = '1970-01-01 00:00:00+00'::timestamp with time zone,\n      badges = ARRAY['welcome'],\n      updated_at = now()\n    WHERE id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Profiles table reset: % rows affected (balance preserved)', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER_LEVEL_STATS TABLE (comprehensive level and game stats)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user_level_stats table...';\n    UPDATE public.user_level_stats \n    SET \n      current_level = 1,\n      lifetime_xp = 0,\n      current_level_xp = 0,\n      xp_to_next_level = 100,\n      border_tier = 1,\n      border_unlocked_at = NULL,\n      available_cases = 0,\n      total_cases_opened = 0,\n      total_case_value = 0,\n      coinflip_games = 0,\n      coinflip_wins = 0,\n      coinflip_wagered = 0,\n      coinflip_profit = 0,\n      best_coinflip_streak = 0,\n      current_coinflip_streak = 0,\n      crash_games = 0,\n      crash_wins = 0,\n      crash_wagered = 0,\n      crash_profit = 0,\n      roulette_games = 0,\n      roulette_wins = 0,\n      roulette_wagered = 0,\n      roulette_profit = 0,\n      roulette_highest_win = 0,\n      roulette_highest_loss = 0,\n      roulette_green_wins = 0,\n      roulette_red_wins = 0,\n      roulette_black_wins = 0,\n      roulette_favorite_color = 'none',\n      roulette_best_streak = 0,\n      roulette_current_streak = 0,\n      roulette_biggest_bet = 0,\n      tower_games = 0,\n      tower_wins = 0,\n      tower_wagered = 0,\n      tower_profit = 0,\n      total_games = 0,\n      total_wins = 0,\n      total_wagered = 0,\n      total_profit = 0,\n      biggest_win = 0,\n      biggest_loss = 0,\n      chat_messages_count = 0,\n      login_days_count = 0,\n      biggest_single_bet = 0,\n      current_win_streak = 0,\n      best_win_streak = 0,\n      tower_highest_level = 0,\n      tower_biggest_win = 0,\n      tower_biggest_loss = 0,\n      tower_best_streak = 0,\n      tower_current_streak = 0,\n      tower_perfect_games = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User level stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE GAME HISTORY\n    -- =============================================================================\n    RAISE NOTICE 'Deleting game history...';\n    DELETE FROM public.game_history WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game history deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET GAME_STATS TABLE\n    -- =============================================================================\n    RAISE NOTICE 'Resetting game_stats table...';\n    UPDATE public.game_stats \n    SET \n      wins = 0,\n      losses = 0,\n      total_profit = 0,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Game stats table reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE CASE REWARDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting case rewards...';\n    DELETE FROM public.case_rewards WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Case rewards deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE FREE CASE CLAIMS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting free case claims...';\n    DELETE FROM public.free_case_claims WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Free case claims deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER ACHIEVEMENTS (UNLOCKED)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting unlocked achievements...';\n    DELETE FROM public.unlocked_achievements WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Unlocked achievements deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER ACHIEVEMENTS (CLAIMED STATUS)\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user achievements...';\n    UPDATE public.user_achievements \n    SET \n      claimed = false,\n      claimed_at = NULL\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User achievements reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE USER DAILY LOGINS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting user daily logins...';\n    DELETE FROM public.user_daily_logins WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User daily logins deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET LEVEL DAILY CASES\n    -- =============================================================================\n    RAISE NOTICE 'Resetting level daily cases...';\n    UPDATE public.level_daily_cases \n    SET \n      is_available = true,\n      last_reset_date = CURRENT_DATE,\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Level daily cases reset: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE BETTING HISTORY (CRASH, ROULETTE)\n    -- =============================================================================\n    RAISE NOTICE 'Deleting crash bets...';\n    DELETE FROM public.crash_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Crash bets deleted: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Deleting roulette bets...';\n    DELETE FROM public.roulette_bets WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette bets deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE TOWER GAMES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting tower games...';\n    DELETE FROM public.tower_games WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Tower games deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE LIVE BET FEED ENTRIES\n    -- =============================================================================\n    RAISE NOTICE 'Deleting live bet feed entries...';\n    DELETE FROM public.live_bet_feed WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Live bet feed entries deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- DELETE ROULETTE CLIENT SEEDS\n    -- =============================================================================\n    RAISE NOTICE 'Deleting roulette client seeds...';\n    DELETE FROM public.roulette_client_seeds WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'Roulette client seeds deleted: % rows affected', records_affected;\n    END IF;\n\n    -- =============================================================================\n    -- RESET USER RATE LIMITS\n    -- =============================================================================\n    RAISE NOTICE 'Resetting user rate limits...';\n    UPDATE public.user_rate_limits \n    SET \n      bet_count = 0,\n      last_bet_time = now(),\n      updated_at = now()\n    WHERE user_id = target_user_id;\n    \n    GET DIAGNOSTICS records_affected = ROW_COUNT;\n    IF records_affected > 0 THEN\n      tables_reset := tables_reset + 1;\n      RAISE NOTICE 'User rate limits reset: % rows affected', records_affected;\n    END IF;\n\n    RAISE NOTICE 'Comprehensive stats reset completed successfully. Tables affected: % (Balance preserved: %)', tables_reset, user_balance;\n\n    RETURN jsonb_build_object(\n      'success', true,\n      'message', 'User statistics reset successfully (balance preserved)',\n      'user_id', target_user_id,\n      'tables_reset', tables_reset,\n      'balance_preserved', user_balance,\n      'timestamp', now()\n    );\n\n  EXCEPTION\n    WHEN OTHERS THEN\n      error_message := SQLERRM;\n      RAISE NOTICE 'Error in comprehensive stats reset for user %: %', target_user_id, error_message;\n      RETURN jsonb_build_object(\n        'success', false,\n        'error', error_message,\n        'user_id', target_user_id,\n        'tables_reset', tables_reset,\n        'balance_preserved', user_balance\n      );\n  END;\nEND;\n$$;\n\n-- FIX 3: CREATE MISSING TABLES (15 tables)\n-- Missing table: maintenance_mode\n-- Missing table: level_requirements\n-- Missing table: bet_history\n-- Missing table: bets\n-- Missing table: cases\n-- Missing table: coinflip_bets\n-- Missing table: tower_bets\n-- Missing table: friend_requests\n-- Missing table: friendships\n-- Missing table: user_sessions\n-- Missing table: push_subscriptions\n-- Missing table: pending_deletions\n-- Missing table: roulette_history\n-- Missing table: roulette_stats\n-- Missing table: admin_users\n"
}